一：对元素内容和值进行操作

1.用text()方法对文本内容的操作

text()用于获取全部匹配元素的文本内容
text()方法取得的结果是所有匹配元素包含的文本的组合起来的文本元素
也可以对XML文档进行解析


text(val)用于设置全部匹配元素的文本内容
text(val)重新设置div元素的文本内容。div原来的内容将会被新设置的内容替换掉。包括HTML内容

2.用html()方法对HTML内容的操作、
html()方法不能同于XML文档，但是可以用于XHTML文档 

html()获取第一个匹配元素的HTML内容

html(val)用于设置全部匹配元素的HTML内容 

3.JQuery提供的3种对元素值操作的方法

val()  用于获取第一个匹配元素的当前值，返回值可以是一个字符串，也可以是一个数组。 $("#username").val();获取ID为username的值

val(val)  用于设置所有匹配元素的值  $("input:text").val("新值") 为全部文本框设置值

val(arrVal)  用于为check、select和radio等元素设置值，参数为字符串数组。   $("select").val(['列表项1','列表项2'])为下拉框设置多选值

二：对DOM文档节点进行操作

2.1创建节点

	创建元素节点
	$(html) JQuery的工厂函数。将传入的HTML标记字符串创建一个DOM对象。并且将这个DOM对象包装成JQ对象返回。
	var $p_1=$("<p></p>");
	$("div").append($p_1);

	创建文本节点
	var $p_1=$("<p>莫凡魔方科技</p>");
	$("div").append($p_1);

	创建属性节点
	var $p_1=$("<p title="莫凡魔方科技">莫凡魔方科技</p>");
	$("div").append($p_1);
	
2.2查找节点
	jQuery节点查找方法
	一、jQuery的父节点查找方法
	$(selector).parent(selector)：获取父节点

	$(selector).parentNode：以node[]的形式存放父节点，如果没有父节点，则返回空数组

	$(selector).parents(selector)：获取祖先元素

	二、jQuery的兄弟节点查找方法
	$(selector).prev() / $(selector).previousSibling()：获取上一个兄弟节点

	$(selector).prevAll()：获取之前所用的兄弟节点

	$(selector).next() / $(selector).nextSibling()：获取下一个兄弟节点

	$(selector).nextAll()：获取之后所有的兄弟节点

	$(selector).siblings()：获取所有的兄弟节点

	三、jQuery的子节点查找方法
	$(selector).children()：获取所有直接子节点

	$(selector).childNodes：以node[]的形式存放子节点，如果没有子节点，则返回空数组

	$(selector).firstChild：获取第一个子节点

	$(selector).lastChild：获取最后一个子节点

	$(selector).contents：获取包含的所有内容，包括空文本

	$(selector).removeChild(selector)：删除并返回指定的子节点

	$$(selector).replaceChild(selector)：替换并返回指定的子节点
	
2.3插入节点

	内部插入
	
	append(content) 为所有匹配的元素的内部追加内容
	<p id="b">编程词典</p>
	$("#b").append("<p>A</p>");
	结果：
	<p id="b">编程词典<p>A</p></p>
	
	appendTo(content) 将所有匹配元素添加到另一个元素的元素集合中
	<p id="B">编程词典</p>
	<p id="A">明日图书</p>
	$("#B").appendTo("#A");
	将B移动到A的里面并且在后面
	结果
	<p id="A">明日图书<p id="B">编程词典</p></p>
	
	prepend(content) 为所有匹配的元素的内部追加前置内容
	<p id="b">编程词典</p>
	$("#b").prepend("<p>A</p>");
	结果
	<p id="b"><p>A</p>编程词典</p>
	
	prependTo(content)将所有匹配元素前置到另一个元素的元素集合中
	<p id="B">编程词典</p>
	<p id="A">明日图书</p>
	$("#B").prependTo("#A");
	将B移动到A的里面并且在前面
	结果
	<p id="A"><p id="B">编程词典</p>明日图书</p>
	-->
	
	<!--
	外部插入
	
	after(content) 在每个匹配的元素之后插入内容
	<p id="B">编程词典</p>
	$("#B").after("<p>A</p>");
	B元素的后面添加一个段落A
	结果
	<p id="B">编程词典</p>
	<p>A</p>
	
	insertAfter(content) 将所有匹配的元素插入到另一个指定元素的元素集合的后面
	<p id="B">编程词典</p>
	$("<p>test</p>").insertAfter("#B");
	将段落插入到B后面
	结果
	<p id="B">编程词典</p>
	<p>test</p>
	
	before(content) 在每个匹配的元素之前插入内容
	<p id="B">编程词典</p>
	$("#B").before("<p>A</p>");
	在B前添加段落A
	结果
	<p>A</p>
	<p id="B">编程词典</p>
	
	insertBefore(content)把所有匹配的元素插入到另一个指定元素的元素集合的前面
	<p id="A">莫凡图书</p>
	<p id="B">JQuery基础开发编程</p>
	$("#B").insertBefore("#A");
	将B添加到A的前面
	结果
	<p id="B">JQuery基础开发编程</p>
	<p id="A">莫凡图书</p>
	
2.4删除节点
	
	
	remove()用于从DOM中删除所有匹配的元素
	remove()方法删除某个节点后，该节点所包含的所有后代节点将同时被删除。
	remove()方法的返回值是一个指向已被删除的节点的引用，以后也可以继续使用这些元素。重新追加元素，事件和数据将丢失。
	
	detach()同remove方法一样，这个方法不会把匹配的元素从JQuery对象中删除，因此，在将来仍可以使用这些匹配元素。与remove不同所有绑定的事件和附加数据都会保留
	
	empty()不是删除节点，而是清空节点。也可以清除元素中所有的后代节点。
	
2.5复制节点
	
	clone()方法用于复制节点。
	一种是不带参数，用于克隆匹配的DOM元素，并且选中这些克隆的副本。
	另一种是带布尔型的参数，当参数为true时，表示克隆匹配的元素以及其所有的事件处理并且选中这些克隆的副本。
						  当参数为false时，表示不复制元素的事件处理
						  
2.6替换节点
	
	replaceAll(selector)
	用于使用匹配的元素替换掉所有selector匹配到的元素
	
	replaceWith(content)
	用于将所有匹配的元素替换成指定的HTML或DOM元素
	
2.7包裹节点
	
	wrap(html|element|fn)
	把所有匹配的元素用其他元素的结构化标记包裹起来
	$("p").wrap("<div class"warp"> </div>"); 把所有的段落用一个新建的DIV包裹起来
	
	unwrap()
	这个方法将移出元素的父元素
	$("p").unwrap();移出段落P的父元素
	
	wrapAll(html|ele) 
	将所有匹配的元素用单个元素包裹起来
	$("p").wrapAll("<div></div>"); 用一个生成div将所有的段落包裹起来
	
	wrapInner(html|element|fnl)
	将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来
	$("p").wrapInner("<b></b>");把所有的段落里的每个子内容加粗
	
2.8遍历节点

	each()方法遍历元素
	each(callback)
	callback是一个函数，可以接受形参index,遍历元素的序号， 从0开始。

三：对元素属性进行操作

	attr(name)
	获取匹配到的第一个元素的属性值（无值返回undefined）
	$("img").attr('src'); 获取页面第一个图片的src属性
	
	attr(key,value)
	为所有匹配的元素设置一个属性(value是设置的值)
	$("img").attr("title","我是图片")；为图片添加一个标题属性，属性值为我是图片
	
	attr(key,fn)
	为所有匹配的元素设置一个函数，返回的属性值(fn代表函数)
	将元素的名称作为其value属性
	$("#fn").attr("value",function(){
		return this.name  返回元素的名称
	})
	
	attr(properties) 
	为所有匹配元素以集合({名：值，名：值})的形式同时设置多个属性
	//为图片同时添加两个属性，分别是src和title
	$("img").attr(src:"test.gif",title:"图片示例")
	
	removeAttr(name)
	为所有匹配的元素删除一个属性
	$("img").removeAttr("title");
	移出所有图片的title属性
	
	prop(name|properties|key,value|fn)
	获取在匹配的元素集合中的第一个元素的属性值
	$("input[type='checkbox']").prop("check");
	选中复选框为true，没选中为false
	
	removeProp(name)
	用来删除由.prop方法设置的属性集
	var $para=$("p");
	$para.prop("luggageCode",1234);
	$para.removeProp("luggageCode");
	设置一个段落的数字属性，然后删除
	
四：对元素样式进行操作

	修改CSS类的方法：
	addClass(class)
	为所有匹配的元素添加指定的css类名
	$("div").addClass("blue line");
	为全部的DIV元素添加blue和line两个CSS类
	
	removeClass(class)
	从所有匹配的元素中删除全部或者指定的CSS类
	$("div").removeClass("line");
	删除全部div元素中添加的line CSS类
	
	toggleClass(class)
	如果存在就删除CSS类，如果不存在就添加CSS类
	$("div").toggleClass("yellow");
	当前匹配的div元素中存在yellow CSS类，则删除。否则添加
	
	toggleClass(class,switch)
	如果switch参数为true则加上对应的CSS，否则就删除。
	$("img").toggleClass("show",true);
	为img元素添加CSS类 show
	$("img").toggleClass("show",false);
	为img元素删除CSS类 show
	
	获取和修改CSS属性的方法
	
	css(name)
	返回第一个匹配元素的样式属性
	$("div").css("color");
	获取第一个DIV元素的color属性
	
	css(name,value)
	为所有匹配元素的指定样式设置值
	$("img").css("border","1px soild #000000")
	为所有的img图片元素设置了边框
	
	css(properties)
	以{属性：值，属性：值...}的形式为所有匹配的元素设置样式属性
	$("tr").css({
		"background-color":"#0A65F3";设置背景颜色
		"font-size":"14px";设置文字大小为14px
		"color":"#FFFFFF";设置字体颜色
	})