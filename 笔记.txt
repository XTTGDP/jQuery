第二章

	一：基本选择器
	
	ID选择器		$('#id') === document.getElementById('id')
	元素选择器	$("div") === document.getElementByTagName("div")
	类名选择器	$('.class') === document.getElementsByClassName("class")
	复合选择器	$('#id,.class,div')
	通配符选择器 $(*) 获取全部元素
	
	二：层次选择器
	
	ancestor descendant 选择器
		ancestor 代表祖先 descendant 代表子孙
		$('ancestor descendent');
		$("ul li")匹配ul元素下的全部li元素
		
	parent>child选择器
		$("parent > child")
				
	prev+next选择器
		prev 和 next 是同级元素
		$("prev + next ")
					
	prev ~ siblings 选择器
		prev 和 siblings 是同辈元素
		匹配prev 后面所有的siblings元素
		$("prev ~ siblings ")
		
	prevAll()定位最后一个 div 之前的所有 div，并为它们添加类：
	nextAll()查找第一个 div 之后的所有类名，并为他们添加类名：
		
	三：简单选择器
	
	:first   匹配找到的第一个元素  $("tr:first") 匹配表格的第一行
	:last    匹配找到的最后一个元素  $("tr.last") 匹配表格的最后一行、
	:even    匹配所有索引值为偶数的元素，索引值从0开始   $("tr:even")匹配索引值为偶数的行
	:odd     匹配所有索引值为奇数的元素，索引值从0开始   $("tr:odd")匹配索引值为奇数的行
	:eq(index) 匹配一个给定索引值的元素	$("div:eq(1)") 匹配第二个div元素
	:gt(index) 匹配所有大于给定索引值的元素  $("span:gt(0)") 匹配索引大于1的span元素
	:lt(index) 匹配所有小于给定索引值的元素  $("div:lt(2)") 匹配索引小于2的div元素
	
	:header    匹配如 h1、h2、h3之类的标题元素 	$(":header") 匹配全部的标题元素
	:not(selector)	去除所有与给定选择器匹配的元素		$("input:not(:checked)")	匹配没有选到的input元素
	:animated     匹配所有正在执行效果的元素      $("div:animated") 匹配正在执行的动画DIV元素
	:lang     选择指定语言的所有元素      $("p:lang(it)")  选择所有<p>的语言属性
	:focus    匹配当前获取焦点的元素      elem.is(":focus") 匹配获得焦点的元素
	:root     选择该文档的根元素			$(":root").css("background-color","yellow") 设置html背景颜色为黄色
	:target   选择由文档URI的格式化识别码表示的目标元素     给定的URI http:\\example.com/#foo  $("p:target") 选择<p id=foo>元素
	
	四：内容过滤器
	
	:contains(text) 匹配包含给定文本的元素    $("li:contains('DOM')")  匹配含有"DOM"文本内容的li元素
	:empty    匹配所有不包含子元素或者文本的空元素  $("td:empty")  匹配不包含子元素或者文本的单元格
	:has(selector)  匹配含有选择器所匹配元素的元素    $("td:has(p)")  匹配表格的单元格中含有<p>标记的单元格
	:parent    匹配含有子元素或者文本的元素     $("td:parent")   //匹配不为空的单元格，即在该单元格中还包括子元素或者文本
	
	五：可见性过滤器
	
	:visible   匹配所有可见元素
	:hidden    匹配所有不可见元素
	
	六：表单对象的属性过滤器
	
	:checked   匹配所有选中的被选中元素   $("input:checked")  匹配所有被选中的input元素
	:disabled  匹配所有不可用元素    $('input:disabled')  匹配所有不可用的input元素
	:enabled   匹配所有可用的元素    $('input:enabled')   匹配所有可用的input 元素
	:selected  匹配所有选中的option元素  $('select option:selected') 匹配所有被选中的选项元素
	
	七：子元素过滤选择器
	
	:first-child    匹配所有给定元素的第1个子元素	$("ul li:first-child")  匹配ul元素中的第1个子元素li
	:last-child 	匹配所有给定元素的最后1个子元素  	$("ul li:lsat-child")匹配ul元素中的最后1个子元素li
	:only-child 	如果某个元素是它父元素中唯一的子元素，那么将被匹配。如果父元素中含有其他元素，则不会被匹配。$("ul li:only-child") 匹配只含有一个li元素的ul元素中的li
	
	:nth-child(index/even/odd/equation) 匹配每个父元素下的第index个子或奇偶元素，index从1开始，而不是从0开始。 $("ul li:nth-child(even)") 匹配ul中索引值为偶数的li元素
																										  $("ul li:nth-child(3)")匹配ul第三个li元素
																										  
	:first-of-type 结构化伪类,匹配E的父元素的第一个E类型的孩子。
	:last-of-type  结构化伪类,匹配E的父元素的最后一个E类型的孩子。
	
	:nth-last-child(n|even|odd|formula)选择所有它们父元素的第n个子元素。计数从最后一个元素开始到第一个元素。 $("ul li:nth-last-child(2)");在每个匹配的ul中查找倒数第2个li
	:nth-last-of-type(n|even|odd|formula)选择所有它们的父级元素的第n个子元素。计数从最后一个元素开始到第一个元素 $("ul li:nth-last-of-type(2)")在每个匹配的ul中查找倒数第二个li
	:nth-of-type(n|even|odd|formula)选择同属于一个父元素之下，并且标签名相同的子元素中的第n个  $("span:nth-of-type(2)")查找每个span ，这span是其所有兄弟span元素中的第二个元素
	
	:only-of-type 选择所有没有兄弟元素，且具有相同的元素名称的元素。		如果父元素有相同的元素名称的其他子元素，那么没有元素会被匹配
	
	八：属性选择器
	
	[attribute]  匹配包含给定属性的元素   $("div[name]") 匹配含有name属性的div元素
	[attribute=value] 匹配属性值为value的元素  $("div[name="test"]")匹配name属性是test的div元素
	[attribute!=value] 匹配属性值不等于value的元素  $("div[name!="test"]")匹配name属性不是test的div元素
	[attribute*=value] 匹配属性值含有value的元素  $("div[name*="test"]")匹配name属性含有test的div元素
	[attribute^=value] 匹配属性值以value开始的元素  $("div[name^="test"]")匹配name属性以test开头的div元素
	[attribute$=value] 匹配属性值以value结束的元素  $("div[name$="test"]")匹配name属性以test结尾的div元素
	[selector1][selector2][selectorN] 复合属性选择器，需要同时满足多个条件使用  $("div[id][name^="test"]")匹配具有id属性并且name属性以test开头的div元素
	
	九：表单选择器
	
	:input 匹配所有的input元素  $(":input") 匹配所有的input元素
							   $("form :input")匹配form标记中所有的input元素
	:button 匹配所有的普通按钮 即type="button" 的 input元素  $(":button")
	:checkbox 匹配所有的复选框  $(":checkbox") 
	:file 匹配所有的文件域  $(":file") 
	:hidden 匹配所有的不可见元素，或者type为hidden的元素  $(":hidden") 
	:image  匹配所有的图像域   $(":image") 
	:password 匹配所有的密码域  $(":password")
	:radio  匹配所有的单选按钮  $(":radio")
	:reset  匹配所有的重置按钮 即type="reset"的input元素 $(":reset")
	:submit 匹配所有的提交按钮 即type="submit"的input元素 $(":submit")
	:text   匹配所有的单行文本框  $(":text")
	
	十：混淆选择器
	
	$.escapeSelector(selector)  处理CSS特殊字符   $.escapeSelector("#target");  "\#target" 对含有#号的ID进行编码
	
第三章
	
	一：对元素内容和值进行操作
	
	1.用text()方法对文本内容的操作
	
	text()用于获取全部匹配元素的文本内容
	text()方法取得的结果是所有匹配元素包含的文本的组合起来的文本元素
	也可以对XML文档进行解析
	
	
	text(val)用于设置全部匹配元素的文本内容
	text(val)重新设置div元素的文本内容。div原来的内容将会被新设置的内容替换掉。包括HTML内容
	
	2.用html()方法对HTML内容的操作、
	html()方法不能同于XML文档，但是可以用于XHTML文档 
	
	html()获取第一个匹配元素的HTML内容
	
	html(val)用于设置全部匹配元素的HTML内容 
	
	3.JQuery提供的3种对元素值操作的方法
	
	val()  用于获取第一个匹配元素的当前值，返回值可以是一个字符串，也可以是一个数组。 $("#username").val();获取ID为username的值
	
	val(val)  用于设置所有匹配元素的值  $("input:text").val("新值") 为全部文本框设置值
	
	val(arrVal)  用于为check、select和radio等元素设置值，参数为字符串数组。   $("select").val(['列表项1','列表项2'])为下拉框设置多选值
	
	二：对DOM文档节点进行操作
	
	2.1创建节点
	
		创建元素节点
		$(html) JQuery的工厂函数。将传入的HTML标记字符串创建一个DOM对象。并且将这个DOM对象包装成JQ对象返回。
		var $p_1=$("<p></p>");
		$("div").append($p_1);
	
		创建文本节点
		var $p_1=$("<p>莫凡魔方科技</p>");
		$("div").append($p_1);
	
		创建属性节点
		var $p_1=$("<p title="莫凡魔方科技">莫凡魔方科技</p>");
		$("div").append($p_1);
		
	2.2查找节点
		jQuery节点查找方法
		一、jQuery的父节点查找方法
		$(selector).parent(selector)：获取父节点
	
		$(selector).parentNode：以node[]的形式存放父节点，如果没有父节点，则返回空数组
	
		$(selector).parents(selector)：获取祖先元素
	
		二、jQuery的兄弟节点查找方法
		$(selector).prev() / $(selector).previousSibling()：获取上一个兄弟节点
	
		$(selector).prevAll()：获取之前所用的兄弟节点
	
		$(selector).next() / $(selector).nextSibling()：获取下一个兄弟节点
	
		$(selector).nextAll()：获取之后所有的兄弟节点
	
		$(selector).siblings()：获取所有的兄弟节点
	
		三、jQuery的子节点查找方法
		$(selector).children()：获取所有直接子节点
	
		$(selector).childNodes：以node[]的形式存放子节点，如果没有子节点，则返回空数组
	
		$(selector).firstChild：获取第一个子节点
	
		$(selector).lastChild：获取最后一个子节点
	
		$(selector).contents：获取包含的所有内容，包括空文本
	
		$(selector).removeChild(selector)：删除并返回指定的子节点
	
		$$(selector).replaceChild(selector)：替换并返回指定的子节点
		
	2.3插入节点
	
		内部插入
		
		append(content) 为所有匹配的元素的内部追加内容
		<p id="b">编程词典</p>
		$("#b").append("<p>A</p>");
		结果：
		<p id="b">编程词典<p>A</p></p>
		
		appendTo(content) 将所有匹配元素添加到另一个元素的元素集合中
		<p id="B">编程词典</p>
		<p id="A">明日图书</p>
		$("#B").appendTo("#A");
		将B移动到A的里面并且在后面
		结果
		<p id="A">明日图书<p id="B">编程词典</p></p>
		
		prepend(content) 为所有匹配的元素的内部追加前置内容
		<p id="b">编程词典</p>
		$("#b").prepend("<p>A</p>");
		结果
		<p id="b"><p>A</p>编程词典</p>
		
		prependTo(content)将所有匹配元素前置到另一个元素的元素集合中
		<p id="B">编程词典</p>
		<p id="A">明日图书</p>
		$("#B").prependTo("#A");
		将B移动到A的里面并且在前面
		结果
		<p id="A"><p id="B">编程词典</p>明日图书</p>
		-->
		
		<!--
		外部插入
		
		after(content) 在每个匹配的元素之后插入内容
		<p id="B">编程词典</p>
		$("#B").after("<p>A</p>");
		B元素的后面添加一个段落A
		结果
		<p id="B">编程词典</p>
		<p>A</p>
		
		insertAfter(content) 将所有匹配的元素插入到另一个指定元素的元素集合的后面
		<p id="B">编程词典</p>
		$("<p>test</p>").insertAfter("#B");
		将段落插入到B后面
		结果
		<p id="B">编程词典</p>
		<p>test</p>
		
		before(content) 在每个匹配的元素之前插入内容
		<p id="B">编程词典</p>
		$("#B").before("<p>A</p>");
		在B前添加段落A
		结果
		<p>A</p>
		<p id="B">编程词典</p>
		
		insertBefore(content)把所有匹配的元素插入到另一个指定元素的元素集合的前面
		<p id="A">莫凡图书</p>
		<p id="B">JQuery基础开发编程</p>
		$("#B").insertBefore("#A");
		将B添加到A的前面
		结果
		<p id="B">JQuery基础开发编程</p>
		<p id="A">莫凡图书</p>
		
	2.4删除节点
		
		
		remove()用于从DOM中删除所有匹配的元素
		remove()方法删除某个节点后，该节点所包含的所有后代节点将同时被删除。
		remove()方法的返回值是一个指向已被删除的节点的引用，以后也可以继续使用这些元素。重新追加元素，事件和数据将丢失。
		
		detach()同remove方法一样，这个方法不会把匹配的元素从JQuery对象中删除，因此，在将来仍可以使用这些匹配元素。与remove不同所有绑定的事件和附加数据都会保留
		
		empty()不是删除节点，而是清空节点。也可以清除元素中所有的后代节点。
		
	2.5复制节点
		
		clone()方法用于复制节点。
		一种是不带参数，用于克隆匹配的DOM元素，并且选中这些克隆的副本。
		另一种是带布尔型的参数，当参数为true时，表示克隆匹配的元素以及其所有的事件处理并且选中这些克隆的副本。
							  当参数为false时，表示不复制元素的事件处理
							  
	2.6替换节点
		
		replaceAll(selector)
		用于使用匹配的元素替换掉所有selector匹配到的元素
		
		replaceWith(content)
		用于将所有匹配的元素替换成指定的HTML或DOM元素
		
	2.7包裹节点
		
		wrap(html|element|fn)
		把所有匹配的元素用其他元素的结构化标记包裹起来
		$("p").wrap("<div class"warp"> </div>"); 把所有的段落用一个新建的DIV包裹起来
		
		unwrap()
		这个方法将移出元素的父元素
		$("p").unwrap();移出段落P的父元素
		
		wrapAll(html|ele) 
		将所有匹配的元素用单个元素包裹起来
		$("p").wrapAll("<div></div>"); 用一个生成div将所有的段落包裹起来
		
		wrapInner(html|element|fnl)
		将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来
		$("p").wrapInner("<b></b>");把所有的段落里的每个子内容加粗
		
	2.8遍历节点
	
		each()方法遍历元素
		each(callback)
		callback是一个函数，可以接受形参index,遍历元素的序号， 从0开始。
	
	三：对元素属性进行操作
	
		attr(name)
		获取匹配到的第一个元素的属性值（无值返回undefined）
		$("img").attr('src'); 获取页面第一个图片的src属性
		
		attr(key,value)
		为所有匹配的元素设置一个属性(value是设置的值)
		$("img").attr("title","我是图片")；为图片添加一个标题属性，属性值为我是图片
		
		attr(key,fn)
		为所有匹配的元素设置一个函数，返回的属性值(fn代表函数)
		将元素的名称作为其value属性
		$("#fn").attr("value",function(){
			return this.name  返回元素的名称
		})
		
		attr(properties) 
		为所有匹配元素以集合({名：值，名：值})的形式同时设置多个属性
		//为图片同时添加两个属性，分别是src和title
		$("img").attr(src:"test.gif",title:"图片示例")
		
		removeAttr(name)
		为所有匹配的元素删除一个属性
		$("img").removeAttr("title");
		移出所有图片的title属性
		
		prop(name|properties|key,value|fn)
		获取在匹配的元素集合中的第一个元素的属性值
		$("input[type='checkbox']").prop("check");
		选中复选框为true，没选中为false
		
		removeProp(name)
		用来删除由.prop方法设置的属性集
		var $para=$("p");
		$para.prop("luggageCode",1234);
		$para.removeProp("luggageCode");
		设置一个段落的数字属性，然后删除
		
	四：对元素样式进行操作
	
		修改CSS类的方法：
		addClass(class)
		为所有匹配的元素添加指定的css类名
		$("div").addClass("blue line");
		为全部的DIV元素添加blue和line两个CSS类
		
		removeClass(class)
		从所有匹配的元素中删除全部或者指定的CSS类
		$("div").removeClass("line");
		删除全部div元素中添加的line CSS类
		
		toggleClass(class)
		如果存在就删除CSS类，如果不存在就添加CSS类
		$("div").toggleClass("yellow");
		当前匹配的div元素中存在yellow CSS类，则删除。否则添加
		
		toggleClass(class,switch)
		如果switch参数为true则加上对应的CSS，否则就删除。
		$("img").toggleClass("show",true);
		为img元素添加CSS类 show
		$("img").toggleClass("show",false);
		为img元素删除CSS类 show
		
		获取和修改CSS属性的方法
		
		css(name)
		返回第一个匹配元素的样式属性
		$("div").css("color");
		获取第一个DIV元素的color属性
		
		css(name,value)
		为所有匹配元素的指定样式设置值
		$("img").css("border","1px soild #000000")
		为所有的img图片元素设置了边框
		
		css(properties)
		以{属性：值，属性：值...}的形式为所有匹配的元素设置样式属性
		$("tr").css({
			"background-color":"#0A65F3";设置背景颜色
			"font-size":"14px";设置文字大小为14px
			"color":"#FFFFFF";设置字体颜色
		})

第四章
	
	bind()	向匹配元素附加一个或更多事件处理器
	blur()	触发、或将函数绑定到指定元素的 blur 事件
	change()	触发、或将函数绑定到指定元素的 change 事件
	click()	触发、或将函数绑定到指定元素的 click 事件
	dblclick()	触发、或将函数绑定到指定元素的 double click 事件
	delegate()	向匹配元素的当前或未来的子元素附加一个或多个事件处理器
	die()	移除所有通过 live() 函数添加的事件处理程序。
	error()	触发、或将函数绑定到指定元素的 error 事件
	event.isDefaultPrevented()	返回 event 对象上是否调用了 event.preventDefault()。
	event.pageX	相对于文档左边缘的鼠标位置。
	event.pageY	相对于文档上边缘的鼠标位置。
	event.preventDefault()	阻止事件的默认动作。
	event.result	包含由被指定事件触发的事件处理器返回的最后一个值。
	event.target	触发该事件的 DOM 元素。
	event.timeStamp	该属性返回从 1970 年 1 月 1 日到事件发生时的毫秒数。
	event.type	描述事件的类型。
	event.which	指示按了哪个键或按钮。
	focus()	触发、或将函数绑定到指定元素的 focus 事件
	keydown()	触发、或将函数绑定到指定元素的 key down 事件
	keypress()	触发、或将函数绑定到指定元素的 key press 事件
	keyup()	触发、或将函数绑定到指定元素的 key up 事件
	live()	为当前或未来的匹配元素添加一个或多个事件处理器
	load()	触发、或将函数绑定到指定元素的 load 事件
	mousedown()	触发、或将函数绑定到指定元素的 mouse down 事件
	mouseenter()	触发、或将函数绑定到指定元素的 mouse enter 事件
	mouseleave()	触发、或将函数绑定到指定元素的 mouse leave 事件
	mousemove()	触发、或将函数绑定到指定元素的 mouse move 事件
	mouseout()	触发、或将函数绑定到指定元素的 mouse out 事件
	mouseover()	触发、或将函数绑定到指定元素的 mouse over 事件
	mouseup()	触发、或将函数绑定到指定元素的 mouse up 事件
	one()	向匹配元素添加事件处理器。每个元素只能触发一次该处理器。
	ready()	文档就绪事件（当 HTML 文档就绪可用时）
	resize()	触发、或将函数绑定到指定元素的 resize 事件
	scroll()	触发、或将函数绑定到指定元素的 scroll 事件
	select()	触发、或将函数绑定到指定元素的 select 事件
	submit()	触发、或将函数绑定到指定元素的 submit 事件
	toggle()	绑定两个或多个事件处理器函数，当发生轮流的 click 事件时执行。
	trigger()	所有匹配元素的指定事件
	triggerHandler()	第一个被匹配元素的指定事件
	unbind()	从匹配元素移除一个被添加的事件处理器
	undelegate()	从匹配元素移除一个被添加的事件处理器，现在或将来
	unload()	触发、或将函数绑定到指定元素的 unload 事件
	
	二：事件绑定
	
	bind()为元素绑定事件
	bind(type,[data],fn)
	type:事件类型
	data：作为even.data属性值传递给事件对象的额外数据对象。大多数情况不使用。
	fn：绑定事件的处理程序
	
	unbind()移出绑定
	unbind([type],[data]);
	type:可选参数，指定事件类型
	data:可选参数，用于指定要从每个匹配元素的事件反绑定的事件处理函数。
	unbind()不填参数，将会删除匹配元素上所有绑定的事件。
	
	one绑定一次性事件处理
	one(type,[data],fn)
	type:用于指定事件类型
	data:可选参数,作为event.data属性值传递给事件对象的额外数据对象
	fn:绑定到每个匹配元素的事件上面的处理函数
	
	on绑定一次或多次事件处理
	on(events,[selector],[data],fn)
	events:一个或多个用空格分隔的事件类型和可选的命名空间，如"click"事件
	selector:可选参数
	data:当一个事件被触发时要传递event.data给事件处理函数
	fn:该事件触发时执行的函数。
	
	off移出一次或多次事件处理
	off(events,[selector],[fn])
	events:一个或多个用空格分隔的事件类型和可选的命名空间，如"click"事件
	selector:一个最初传递到on事件处理程序附加的选择器
	fn:该事件触发时执行的函数。
	
	三：模拟用户操作
	
		JQ提供了3种模拟用户的操作事件
		
		1.模拟用户的操作触发事件
			常用triggerHandler()方法和trigger()方法来模拟用户的触发事件
			
			$("#button").trigger("click");触发ID为button的点击事件
			
			triggerHandler()方法的语句与tigger()方法完全相同，但triggerHandler()方法不会导致游览器执行相同名的的默认行为。而trigger会。
			
		2.模仿悬停事件
		指用户鼠标移入到一个对象上，又移出
		hover(over,out);
		over:用于指定当鼠标指针在移动到匹配元素上时触发的函数。
		out:用于指定当鼠标指针在移出匹配元素上时触发的函数。
		
	四：事件捕获与事件冒泡
	
	event.stopPropagation();//阻止冒泡
	等同于JS的event.cancelBubble=true;
	
	event.preventDefault();//阻止默认事件
	
	五：事件对象的属性
	
	function(event)  event事件对象
	
	event.type  获取事件的类型
	event.preventDefault()	阻止默认的事件行为
	event.stopPrepagation() 阻止事件的冒泡行为
	event.target 获取到触发事件的元素
	event.relatedTarget
	relatedTarget事件属性返回与事件的目标节点相关的节点
	对于mousevoer事件来说，该属性是鼠标指针移到目标节点上所离开的那个节点
	对于mouseout事件来说，该属性是离开目标时，鼠标指针进入的节点
	
	event.pageX和event.pageY
	获取指针相对于页面的x坐标和y坐标。
	
	event.which
	该属性提示按下了哪个按键或按钮。
	
第五章
	
	一：隐藏匹配元素
	
	hide();不带任何效果的隐藏元素
	
	hide(speed,[callback]); 
	spped：指定动画时长	三个默认值 show(600毫秒)	normal(400毫秒)	fast(200毫秒)
	callback指定隐藏完成后触发的回调函数
	
	二：显示匹配元素
	
	show();不带任何效果的显示元素
	show(speed,[callback])
	spped：指定动画时长	三个默认值 show(600毫秒)	normal(400毫秒)	fast(200毫秒)
	callback指定隐藏完成后触发的回调函数
	
	三：切换元素可见状态
	
	toggle() 显示就变成隐藏，隐藏加变成显示
	
	四：淡入淡出的动画效果
	
	fadeIn(speed,[callback]);
	通过增大不透明度实现匹配元素淡入的效果
	$("img").fadeIn(300);淡入效果
	
	fadeOut(speed,[callback]);
	通过减小不透明度实现匹配元素淡出的效果
	$("img").fadeOut(300);
	
	fadeTo(speed,opacity,[callback])
	将匹配元素的不透明度以渐进的方式调整到指定的参数
	$("img").fadeTo(300,0.15)在3秒内将图片淡入淡出至15%不透明度
	opacity值在0-1,值越小可见性越差 0完全透明	1完全不透明
	
	
	四：滑动效果
	
	slideDown()方法(用于显示匹配的元素)
		向下增加元素高度，动态显示匹配的元素。
		逐渐向下增加匹配的隐藏元素的高度，直到元素完全显示
		
	slideDown(speed,[callback]);
	spped：指定动画时长	三个默认值 show(600毫秒)	normal(400毫秒)	fast(200毫秒)
	callback指定显示完成后触发的回调函数
	
	slideUp()方法(用于滑动隐藏的元素)
		向上减少元素高度，动态隐藏匹配元素。
		逐渐向上减少匹配显示元素的高度，直到元素完全隐藏
	slideUp(speed,[callback]);
	spped：指定动画时长	三个默认值 show(600毫秒)	normal(400毫秒)	fast(200毫秒)
	callback指定隐藏完成后触发的回调函数
	
	
	slideToggle()方法(用于通过高度的变化动态切换元素的可见性)
	显示就变成隐藏，隐藏加变成显示
	
	
	五：自定义的动画效果
	
	animate()方法创建自定义动画
	
		animate(params,speed,callback);
		params:表示一个包含属性和值的映射，可以同时包含多个属性，例如{left:"200px",top:"100px"}
		speed:指定动画时长	三个默认值 show(600毫秒)	normal(400毫秒)	fast(200毫秒),可选参数
		callback:指定运行完毕后触发的回调函数，可选参数
		
		使用animate()的元素，必须设置元素的定位属性position为relative或absoulte,元素才能移动。
		
		animate()方法中可以使用属性opacity来设置元素的透明度
		如果在{lfet:400px}中的400px前加上"+="表示在当前位置上累加
	stop()停止动画
		
		stop(clearQueue,gotoEnd);
		clearQueue:表示是否清空尚未执行完的动画队列(值为true时表示清空动画队列)
		gotoEnd:表示是否让正在执行的动画直接到达动画结束时的状态(值为true时表示直接到达动画结束时状态)
				只有直接到达正在执行的动画的最终状态，并不能直接到达动画系列所设置的动画最终状态
				
	使用animate()方法时，当用户快速在某个元素上执行animate()动画时，就会出现动画累积。
	解决方法：判断元素是否正在处于动画状态，如果不处于才为元素添加新的动画，否则不添加。
	if(!$(element).is(:animated)){}
	
	delay()延迟动画执行
	
	delay(speed)
	speed:延迟时间
	
	finish()停止当前正在执行的动画
	
	finish()可以停止当前运行的动画，并且删除所有其他的对话。
	
	stop(true,true)是将目前动画跳转到最终值
	finish()会导致全部动画跳转到最终值
	
第六章
	一：表单控件

	action属性：是指定处理表单提交数据的脚本文件，可以是JSP、ASP.NET或PHP脚本文件
	<form action="URL"></form>

	name属性：用于给表单命名
	<form name="form_name"></form>

	method属性:定义处理程序从表单中获取信息的方式
	<form method="method"></form>
	取值可以是get或post

	enctype：用于设置表单信息提交的编码
	<form enctype="value"></form>
		value取值
			test/plain   纯文本的形式传送
			application/x-www-form-urlencoded	默认编码方式
			multipart/form-data		MIME编码，上传文件的表单必须选择该项

	target属性:指定目标窗口的打开方式
	<form target="target_win"></form>
		target_win取值
			_blank	将返回信息显示在新打开的游览器窗口中
			_parent	将返回信息显示在父级游览器窗口中
			_self	将返回信息显示在当前游览器窗口中
			_top	将返回信息显示在顶级游览器窗口中

	input:输入标记，常用的文本域、按钮等都用这个标记
	<form><input name="field_name" type="type_name"/></form>
	field_name:控件名称
	type_name:控件类型
		type_name取值
			text	文本框
			password	密码域
			radio	单选按钮
			checkbox	复选框
			button	普通按钮
			submit	提交按钮
			reset	重置按钮
			image	图形域，也称为图像提交按钮
			hidden	隐藏域，隐藏域将不显示在页面上，只将内容传递到服务器中
			file	文件域
		
	text文本框
	<input type="text" name="field_name" maxlength=max_value size=size_value value="field_value">
		name	文本框名字
		maxlength	文本框最大的输入字符数
		size	文本框的宽度
		value	文本框的默认值
		
	password密码域
	<input type="password" name="field_name" maxlength="max_value" size="size_value">
		name 密码域名称
		maxlength 密码域的最大输入字符数
		size 密码域的宽度
		value 密码域的默认值
	
	radio单选按钮
	<input type="radio" name="field_name" checked value="value">
		checked 表示此选项默认选中
		value	表示选中项目后传送到服务器端的值
	
	checkbox复选框
	<input type="checkbox" name="field_name" checked value="value">
		checked 表示此选项默认选中
		value	表示选中项目后传送到服务器端的值
		
	button 普通按钮
	<input type="button" name="field_name" value="button_text">
		field_name 按钮名字
		button_text 按钮上的文字
	
	submit 提交按钮
	<input type="submit" name="field_name" value"submit_text">
		field_name 提交按钮名字
		submit_text 按钮上的名字
		
	textarea文本域标记
	<input type="textarea" value="text_value" rows="rows_value" cols="cols_value" value="value">
		name 文本域名称
		rows 文本域行数
		cols 文本域列数
		value 文本域默认值
		
	select、option 菜单和列表标记
	<select name="select_name" size=select_size multiple>
		<option value="option_value" selected>选项</option>
		<option value="option_value">选项</option>
	</select>
		name 菜单和列表的名称
		size 显示的选项数目
		multiple 列表中的项目多卷
		value	选项值
		selected	默认选项
		
	二：操作文本域

	操作文本框的值和状态
	
		获取文本框的值的方法
			var textCon=$("#id").val();
		或者 var textCon=$("#id").attr("value");
		
		设置文本框的值,可以使用attr()方法
		$("#id").attr("value","要设定的值");
		设置文本框不可编辑的方法
		$("#id").attr("disabled","disabled");
		设置文本框可编辑的方法
		$("#id").removeAttr("disabled");


	三：操作单选按钮和复选框
		
		用attr()方法可以设置选中单选按钮或者复选框
		$("#id").attr("checked",true);
		使用attr()方法取消选中单选按钮或者复选框
		$("#id").removeAttr("checked");
		判断选中状态
		if($("#id").attr("checked")=="checked"){
			
		}

	四：操作下拉框
		读取下拉框的值
		var setVal=$("#id").val();
		设置下拉框的选中项
		$("#id").attr("value",选中项的值);
		清空下拉菜单
		if($("#id").empty());
		向下拉菜单中添加菜单项
		if($("#id").append("<option value="值">文本</option>"))
	

第七章
	load方法可以快速实现获取异步数据的功能。
	load(url[,data][,callback])
	参数说明：
		url:请求HTML页面的URL地址
		data:可选参数。发送至服务器的key/value数据
		callback:可选参数。请求完成时的回调函数，无论请求是否成功。

	02$.get方法请求数据
		$.get()方法使用get方式进行异步请求
		$.get(url[,data][,callback][,type])
			url:请求的HTML页面的URL地址
			data:可选参数，发送到服务器的数据
			callback:可选参数，规定当请求成功时运行的函数
			type:可选参数，预计的服务器响应的数据类型。默认地，JQuery将智能判断

	03$.post方法请求数据
		$.post(url[,data][,callback][,type])
			url:请求的HTML页面的URL地址
			data:可选参数，发送到服务器的数据
			callback:可选参数，规定当请求成功时运行的函数
			type:可选参数，预计的服务器响应的数据类型。默认地，JQuery将智能判断


	post和get传递数据的不同
		get传递2KB以下的数据，数据追加到URL中发送。会被游览器缓存起来。这样别人也可以从游览器的历史读取到客户端的信息，有安全隐患。
			
		post传递时，不在URL中，而是将数据作为HTTP消息实体发送给web服务器，避免数据被游览器缓存，比get方式更安全，数据量更多。

	04$.getScript方法加载JS文件
		在页面获取JS文件的内容方法
			<script src="JS文件"></script>
			或者
			$("<script src="JS文件">").appendTo("head");
			
			但这样的方法都不是最理想的，在jQuery中，通过全局函数getScript()加载JS文件后，不仅可以像加载HTML片段一样简单方便，而且JavaScript会自动执行
			大大提高了页面的执行效率。
			$("#btn").click(function(){
				$.getScript("JS文件")
			})
			getScript()方法还具备回调函数，在JS文件成功载入后执行

	05$.getJSON方法加载JSON文件
		在页面获取JSON文件的内容
			$("#btn").click(function(){
				$.getJSON("JSON文件",回调函数)
			})
			getJSON()方法还具备回调函数，在JSON文件成功载入后执行 

	06$.ajax()方法请求数据
		$.ajax() 不仅可以方便实现上述3个全局函数完成的功能，而且可以更多的关注实现过程的细节。
			$.ajax(option)
				option为$.ajax()方法中的请求设置，格式为key/value,即包含发送请求的参数，也含有服务器响应后回调的数据
			
			$.ajax()方法中的参数列表
			参数名称        数据类型        说明
			url            String           发送请求的地址(默认为当前页面)

			type           String           数据请求方式(get或post),默认为get

			data           String或Object   发送到服务器的数据。如果不是字符串则自动转换成字符串格式，
											如果是get请求方式，那么该字符串将附在URL后面

			dataType       String           服务器返回的数据类型。如果没有指定，jQuery将自动根据HTTP包MIME信息自动判断，
											服务器返回的数据根据自动判断结果进行解析，传递给回调函数。可用类型如下：
											HTML:返回纯文本的HTML信息，包含的Script标记会在插入页面时被执行。
											script:返回纯文本JavaScript代码
											text:返回纯文本字符串
											xml:返回可被jQuery处理的XML文档
											json:返回JSON格式的数据
							
			beforeSend      Function        该函数用于在发送请求前修改XMLHttpRequest对象，其中参数就是XMLHttpRequest对象，
											由于该函数本身是jQuery事件，因此如果函数返回false，则表示取消本次事件。
											function(XMLHttpRequest){
												this;//调用本次Ajax请求时传递的options参数
											}
									
			complete        Function        请求完成后调用的回调函数，该函数无论数据发送成功或失败都会调用，其中有两个参数，
											一个是XMLHttpRequest对象，另一个是textStatus,用来描述成功请求类型的字符串。
											function(XMLHttpRequest){
												this;//调用本次Ajax请求时传递的options参数
											}

			success         Function        请求成功后调用的回调函数，该函数有两个参数，
											一个是根据dataType处理后服务器返回的数据，另一个是textStatus,用来描述状态的字符串。
											function(data,textStatus){
												1//data可能是xmlDOc、jsonObj、html、text等
												this;//调用本次Ajax请求时传递的options参数
											}

			error           Function        请求失败后调用的回调函数，该函数有3个参数，
											第一个是XMLHttpRequest对象。第二个是出错信息strError,第三个是捕捉到的错误对象strObject。
											function(XMLHttpRequest,strError,strObject){
												1//通常情况下strError,strObject只有一个包含信息
												this;//调用本次Ajax请求时传递的options参数
											}

			global          Boolean         是否响应全局事件，默认是true,表示响应，如果设置成false，表示不响应，全局事件$.ajaxStart等将不响应

			timeout         Number          请求超时的时间(毫秒),该设置将覆盖$.ajaxSetup()方法的全局设置

	07serialize()方法序列化表单
		在使用全局函数$.get()和$.post()向服务器传递参数时，其中的参数是通过名称属性逐个搜索输入字段的方式进行传输
			例如：
				$.post("03post.php",{username:$("#username").val(),content:$("#content").val()},function(data,textStatus){
					代码
				})
			
			如果表单输入字段过多，这种方法过于笨重
			jQuery使用\

			serialize()方法作用于一个jQuery方法，可以将DOM元素内容序列化为字符串，用于Ajax请求

	08Ajax全局事件
			事件名称                        参数            说明
		ajaxComplete(callback)          callback        Ajax请求完成时执行的函数
		
		ajaxError(callback)             callback        Ajax请求发生错误时执行的函数，
														其中捕获到的错误可以作为最后一个参数进行传递
													
		ajaxSend(callback)              callback        Ajax请求发送前执行的函数

		ajaxStart(callback)             callback        Ajax请求开始时执行的函数

		ajaxStop(callback)              callback        Ajax请求结束时执行的函数

		ajaxSuccess(callback)           callback        Ajax请求成功时执行的函数

		在jQuery中，所有的全局事件都是以XMLHttpRequest对象和其设置作为参数传递给回调函数的，在处理回调函数时，只要分析其传回的参数值即可。